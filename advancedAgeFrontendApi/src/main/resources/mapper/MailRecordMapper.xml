<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.springboot.dao.MailRecordMapper" >
  <resultMap id="BaseResultMap" type="com.example.springboot.entity.MailRecord" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="mail_content" property="mailContent" jdbcType="VARCHAR" />
    <result column="mail_type" property="mailType" jdbcType="CHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="advanced_age_base_id" property="advancedAgeBaseId" jdbcType="INTEGER" />
    <result column="verify_unit" property="verifyUnit" jdbcType="VARCHAR" />
    <result column="verify_person" property="verifyPerson" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, email, mail_content, mail_type, create_time, advanced_age_base_id, verify_unit, 
    verify_person
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.example.springboot.entity.MailRecordExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from mailRecord
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from mailRecord
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from mailRecord
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.example.springboot.entity.MailRecordExample" >
    delete from mailRecord
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.example.springboot.entity.MailRecord" >
    insert into mailRecord (id, email, mail_content, 
      mail_type, create_time, advanced_age_base_id, 
      verify_unit, verify_person)
    values (#{id,jdbcType=INTEGER}, #{email,jdbcType=VARCHAR}, #{mailContent,jdbcType=VARCHAR}, 
      #{mailType,jdbcType=CHAR}, #{createTime,jdbcType=TIMESTAMP}, #{advancedAgeBaseId,jdbcType=INTEGER}, 
      #{verifyUnit,jdbcType=VARCHAR}, #{verifyPerson,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.example.springboot.entity.MailRecord" >
    insert into mailRecord
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="email != null" >
        email,
      </if>
      <if test="mailContent != null" >
        mail_content,
      </if>
      <if test="mailType != null" >
        mail_type,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="advancedAgeBaseId != null" >
        advanced_age_base_id,
      </if>
      <if test="verifyUnit != null" >
        verify_unit,
      </if>
      <if test="verifyPerson != null" >
        verify_person,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="email != null" >
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="mailContent != null" >
        #{mailContent,jdbcType=VARCHAR},
      </if>
      <if test="mailType != null" >
        #{mailType,jdbcType=CHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="advancedAgeBaseId != null" >
        #{advancedAgeBaseId,jdbcType=INTEGER},
      </if>
      <if test="verifyUnit != null" >
        #{verifyUnit,jdbcType=VARCHAR},
      </if>
      <if test="verifyPerson != null" >
        #{verifyPerson,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.example.springboot.entity.MailRecordExample" resultType="java.lang.Integer" >
    select count(*) from mailRecord
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update mailRecord
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.email != null" >
        email = #{record.email,jdbcType=VARCHAR},
      </if>
      <if test="record.mailContent != null" >
        mail_content = #{record.mailContent,jdbcType=VARCHAR},
      </if>
      <if test="record.mailType != null" >
        mail_type = #{record.mailType,jdbcType=CHAR},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.advancedAgeBaseId != null" >
        advanced_age_base_id = #{record.advancedAgeBaseId,jdbcType=INTEGER},
      </if>
      <if test="record.verifyUnit != null" >
        verify_unit = #{record.verifyUnit,jdbcType=VARCHAR},
      </if>
      <if test="record.verifyPerson != null" >
        verify_person = #{record.verifyPerson,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update mailRecord
    set id = #{record.id,jdbcType=INTEGER},
      email = #{record.email,jdbcType=VARCHAR},
      mail_content = #{record.mailContent,jdbcType=VARCHAR},
      mail_type = #{record.mailType,jdbcType=CHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      advanced_age_base_id = #{record.advancedAgeBaseId,jdbcType=INTEGER},
      verify_unit = #{record.verifyUnit,jdbcType=VARCHAR},
      verify_person = #{record.verifyPerson,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.springboot.entity.MailRecord" >
    update mailRecord
    <set >
      <if test="email != null" >
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="mailContent != null" >
        mail_content = #{mailContent,jdbcType=VARCHAR},
      </if>
      <if test="mailType != null" >
        mail_type = #{mailType,jdbcType=CHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="advancedAgeBaseId != null" >
        advanced_age_base_id = #{advancedAgeBaseId,jdbcType=INTEGER},
      </if>
      <if test="verifyUnit != null" >
        verify_unit = #{verifyUnit,jdbcType=VARCHAR},
      </if>
      <if test="verifyPerson != null" >
        verify_person = #{verifyPerson,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.springboot.entity.MailRecord" >
    update mailRecord
    set email = #{email,jdbcType=VARCHAR},
      mail_content = #{mailContent,jdbcType=VARCHAR},
      mail_type = #{mailType,jdbcType=CHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      advanced_age_base_id = #{advancedAgeBaseId,jdbcType=INTEGER},
      verify_unit = #{verifyUnit,jdbcType=VARCHAR},
      verify_person = #{verifyPerson,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>